name: PR Validation Workflow

on:
  pull_request:
    branches: [main]

env:
  DOTNET_VERSION: '9.0.100'
  SONARQUBE_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}

jobs:
  validate:
    name: Validate .NET Web API Before Merge
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore Dependencies
        run: dotnet restore

      # Step 1: Code structure check
      - name: Run dotnet format (check code style)
        run: dotnet format --verify-no-changes --severity error

      - name: Build project and validate analyzers
        run: dotnet build --no-restore -warnaserror

      # Step 2: Check for <summary> in all controller methods
      - name: Check for XML summary comments in Controllers
        run: |
          echo "Checking for <summary> tags in controller files..."
          files=$(find ./Git_Workflows.API/Controllers -name "*.cs" -exec grep -L "<summary>" {} \; || true)
          if [[ -n "$files" ]]; then
            echo "Missing <summary> comments in the following files:"
            echo "$files"
            exit 1  # This causes the workflow to fail
          else
            echo "All controller files contain <summary> comments."
          fi

      # Step 3: Check API Route Naming Pattern and Uniqueness
      - name: Check API Route Naming Pattern and Uniqueness
        run: |
          echo "Validating API route naming, presence, and duplicates..."
          
          # Regex to enforce lowercase-only API routes: api/something or api/something/else, with no digits or uppercase
          ROUTE_REGEX='Route\("api(/[a-z-]+)+\"\)'  # accepts hyphens in controller names, no numbers or uppercase letters
          MAIN_ROUTE_REGEX='^\[Route\("api/[a-z-]+\"\)]'   # main route must start with 'api/'
          DUPLICATE_CHECK_FILE="all_routes.tmp"
          > $DUPLICATE_CHECK_FILE
          
          has_errors=0
          
          for file in ./Git_Workflows.API/Controllers/*.cs; do
            echo "Checking $file"
          
            # 1. Check for improperly named method routes (uppercase, digits, etc.)
            invalid_routes=$(grep -EL "$ROUTE_REGEX" "$file" || true)
            if [[ -n "$invalid_routes" ]]; then
              echo "Invalid route pattern found (uppercase, digits, etc.) in methods in $file:"
              echo "$invalid_routes"
              has_errors=1
            fi

            # 2. Check if the controller has a valid main route
            first_route=$(grep -m 1 '\[Route("' "$file" || true)

            if [[ "$first_route" =~ \[Route\(\"api/[a-z-]+\"\)\] ]]; then
              echo "Valid main route found --> $first_route"
            else
              echo "Missing or invalid main route in controller in $file (should start with 'api/')"
              has_errors=1
            fi
          done
          
          # Check for duplicates - Ensure this check runs after the loop finishes
          if [[ $has_errors -eq 1 ]]; then
            echo "Errors found in route naming patterns."
            exit 1
          fi
      
          rm -f $DUPLICATE_CHECK_FILE
          echo "All routes are valid, lowercase, unique, and have proper route names."

      # Step 4: Validate that POST methods use models (not primitives) and GET methods do not use models.
      # -------------------------------------------------------------------------------------
      # This step validates API controller methods to enforce consistent parameter rules:
      # 
      # For [HttpPost(...)] methods:
      #   1) Must accept either a model class (e.g., LocationModel) or no parameters.
      #   2) Cannot accept primitive types like string, int, etc.
      # 
      # For [HttpGet(...)] methods:
      #   1) Can have no parameters or one/more primitive parameters (string, int, etc.).
      #   2) Cannot accept model classes as parameters.
      # 
      # The script scans controller files and exits with an error if any method violates 
      # these conventions to maintain API consistency and proper usage patterns.
      # -------------------------------------------------------------------------------------
      - name: Validate API Method Parameters for GET and POST
        run: |
          echo "Validating GET and POST API method parameters..."
      
          PRIMITIVES_REGEX='^(string|int|long|float|double|bool|Guid|DateTime)(\[\])?$'
          POST_ISSUES=0
          GET_ISSUES=0
      
          for file in ./Git_Workflows.API/Controllers/*.cs; do
            while IFS= read -r line; do
              if [[ "$line" =~ \[Http(Post|Get).* ]]; then
                ATTR="$line"
                read -r signature
      
                # Extract method parameters
                params=$(echo "$signature" | sed -n 's/.*(\(.*\)).*/\1/p' | tr -d '[:space:]')
      
                # POST validation
                if [[ "$ATTR" =~ \[HttpPost ]]; then
                  if [[ -z "$params" ]]; then
                    continue  # No parameters
                  elif echo "$params" | grep -q ","; then
                    echo "POST method with multiple parameters is not allowed in $file:"
                    echo "$ATTR"
                    echo "$signature"
                    POST_ISSUES=1
                  else
                    type=$(echo "$params" | cut -d' ' -f1)
                    if [[ "$type" =~ $PRIMITIVES_REGEX ]]; then
                      echo "POST method using primitive type '$type' is not allowed in $file:"
                      echo "$ATTR"
                      echo "$signature"
                      POST_ISSUES=1
                    fi
                  fi
      
                # GET validation
                elif [[ "$ATTR" =~ \[HttpGet ]]; then
                  if [[ -z "$params" ]]; then
                    continue  # No parameters
                  else
                    # Split params by comma and check each
                    IFS=',' read -ra param_arr <<< "$params"
                    for param in "${param_arr[@]}"; do
                      type=$(echo "$param" | cut -d' ' -f1)
                      if ! [[ "$type" =~ $PRIMITIVES_REGEX ]]; then
                        echo "GET method using model type '$type' is not allowed in $file:"
                        echo "$ATTR"
                        echo "$signature"
                        GET_ISSUES=1
                      fi
                    done
                  fi
                fi
      
              fi
            done < <(grep -E '\[Http(Post|Get)' "$file" -A 1)
          done
      
          if [[ "$POST_ISSUES" -eq 1 || "$GET_ISSUES" -eq 1 ]]; then
            echo "API method parameter validation failed."
            exit 1
          else
            echo "All GET and POST methods meet parameter rules."
          fi
      
      # Step 5 : Check Local Variables (camelCase)
      - name: Check for camelCase Local Variables
        run: |
          echo "Checking for camelCase local variables..."
          violation_count=0

          # Loop through all C# files
          find ./Git_Workflows.API/Controllers -name "*.cs" | while read -r file; do
            while IFS= read -r line; do
              # Skip lines that don't look like local variable declarations
              if [[ "$line" =~ ^[[:space:]]*(int|string|bool|var|double|float|long|decimal|byte|char|short|object|DateTime)[[:space:]]+([a-zA-Z_][a-zA-Z0-9_]*)([[:space:]]*|[[:space:]]*=\s*.*) ]]; then
                variable_name="${BASH_REMATCH[2]}"

                # Check if it's camelCase (lowercase first character)
                if [[ ! "$variable_name" =~ ^[a-z][a-zA-Z0-9]*$ ]]; then
                  echo "Invalid variable name: '$variable_name' in file $file. It must be camelCase."
                  violation_count=$((violation_count + 1))
                fi
              fi
            done < "$file"
          done
          
          echo "Final violation count: $(violation_count)"
          # Report the results
          if [[ $violation_count -eq 0 ]]; then
            echo "All local variables follow camelCase convention."
          else
            echo "Found $violation_count local variable naming violations."
            exit 1
          fi

